<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE abiword PUBLIC "-//ABISOURCE//DTD AWML 1.0 Strict//EN" "http://www.abisource.com/awml.dtd">
<abiword template="false" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:math="http://www.w3.org/1998/Math/MathML" xid-max="328" xmlns:dc="http://purl.org/dc/elements/1.1/" fileformat="1.1" xmlns:svg="http://www.w3.org/2000/svg" xmlns:awml="http://www.abisource.com/awml.dtd" xmlns="http://www.abisource.com/awml.dtd" xmlns:xlink="http://www.w3.org/1999/xlink" version="2.8.6" xml:space="preserve" props="dom-dir:ltr; document-footnote-restart-section:0; document-endnote-type:numeric; document-endnote-place-enddoc:1; document-endnote-initial:1; lang:en-US; document-endnote-restart-section:0; document-footnote-restart-page:0; document-footnote-type:numeric; document-footnote-initial:1; document-endnote-place-endsection:0">
<!-- ======================================================================== -->
<!-- This file is an AbiWord document.                                        -->
<!-- AbiWord is a free, Open Source word processor.                           -->
<!-- More information about AbiWord is available at http://www.abisource.com/ -->
<!-- You should not edit this file by hand.                                   -->
<!-- ======================================================================== -->

<metadata>
<m key="dc.format">application/x-abiword</m>
<m key="abiword.generator">AbiWord</m>
</metadata>
<history version="3" edit-time="21490" last-saved="1335387352" uid="0205a4b4-8ee7-11e1-809f-c0a9172c3967">
<version id="3" started="1335366841" uid="0b5bd718-8f19-11e1-809f-c0a9172c3967" auto="0" top-xid="318"/>
</history>
<styles>
<s type="P" name="Normal" basedon="" followedby="Current Settings" props="font-family:Liberation Serif; margin-top:0pt; font-variant:normal; margin-left:0pt; text-indent:0in; widows:2; font-style:normal; font-weight:normal; text-decoration:none; color:000000; line-height:1.0; text-align:left; margin-bottom:0pt; text-position:normal; margin-right:0pt; bgcolor:transparent; font-size:12pt; font-stretch:normal"/>
</styles>
<pagesize pagetype="A4" orientation="portrait" width="210.000000" height="297.000000" units="mm" page-scale="1.000000"/>
<section xid="152">
<p style="Normal" xid="153" props="text-align:left; dom-dir:ltr">Hello, I'm Andrew Stitcher, I work for Red Hat which as you know is a large open source company and the open source world provides at least some of the perspective for this talk: "When only C will do"</p>
<p style="Normal" xid="156"><c></c></p>
<p style="Normal" xid="157" props="text-align:left; dom-dir:ltr">Looking at a couple of the other talks at this years ACCU conference I think I might be taking a rather unpopular direction. After all you might have just come from a talk telling you that C is going the way of the Dodo - or perhaps that isn't exactly what Dirk was saying - I couldn't get to that talk as I was busy here in this room trying to keep people from their post prandial nap! I hope I succeeded for at least some of them.</p>
<p style="Normal" xid="164"><c></c></p>
<p style="Normal" xid="165" props="text-align:left; dom-dir:ltr">And tomorrow none other than Bob Martin is giving what sounds like a eulogy for C - "I come to bury C, not to praise it" anyone?</p>
<p style="Normal" xid="167"><c></c></p>
<p style="Normal" xid="168" props="text-align:left; dom-dir:ltr">When I put the proposal for this session together, oh, way back in September I think, I was fairly convinced by the arguments I'm going to bring you in the next few minutes. However as I thought more and actually starting preparing this talk my views have changed a bit. So</p>
<p style="Normal" xid="172" props="text-align:left; dom-dir:ltr">it's fair to treat this as bit of a "devils advocate" position - see if you can tell when I don't actually believe what I'm telling you!</p>
<p style="Normal" xid="174"><c></c></p>
<p style="Normal" xid="175" props="text-align:left; dom-dir:ltr">However it worth pointing out now that in this talk I'm coming from a very practical standpoint. I'm not going to be telling of anything the theoretically C can do that no other language can do (though there may be some things like that). Pretty much everything I'm talking about here is about actually programming in the real world or at least in the open source world which is some sort of approximation to the real world!</p>
<p style="Normal" xid="182"><c></c></p>
<p style="Normal" xid="183" props="text-align:left; dom-dir:ltr">[2 mins to here]?</p>
<p style="Normal" xid="184"><c></c></p>
<p style="Normal" xid="185" props="text-align:left; dom-dir:ltr">I started thinking about C and its uses because of the project I work</p>
<p style="Normal" xid="186" props="text-align:left; dom-dir:ltr">on for money. This is the Qpid project which is an implementation of</p>
<p style="Normal" xid="187" props="text-align:left; dom-dir:ltr">the AMQP protocol. And this is a protocol used to provide messaging</p>
<p style="Normal" xid="188" props="text-align:left; dom-dir:ltr">middleware (ooh I hate that jargon) capabilities. In practice what</p>
<p style="Normal" xid="189" props="text-align:left; dom-dir:ltr">this means is that AMQP systems have a central message broker which clients</p>
<p style="Normal" xid="190" props="text-align:left; dom-dir:ltr">talk to to transfer their messages. The language the broker is written</p>
<p style="Normal" xid="191" props="text-align:left; dom-dir:ltr">in is unimportant at the moment because it's not visible at this</p>
<p style="Normal" xid="192" props="text-align:left; dom-dir:ltr">architectural level, all communication between the clients is via the</p>
<p style="Normal" xid="193" props="text-align:left; dom-dir:ltr">broker using the standardised AMQP protocol.</p>
<p style="Normal" xid="194"><c></c></p>
<p style="Normal" xid="195" props="text-align:left; dom-dir:ltr">[A little picture of broker and client might actually help here]</p>
<p style="Normal" xid="196"><c></c></p>
<p style="Normal" xid="197" props="text-align:left; dom-dir:ltr">Now here is an interesting thing, people want to be able to use</p>
<p style="Normal" xid="198" props="text-align:left; dom-dir:ltr">messaging between components of their systems irrespective of what</p>
<p style="Normal" xid="199" props="text-align:left; dom-dir:ltr">language they write their systems in, so that picture turns into</p>
<p style="Normal" xid="200" props="text-align:left; dom-dir:ltr">something more like this</p>
<p style="Normal" xid="201"><c></c></p>
<p style="Normal" xid="202" props="text-align:left; dom-dir:ltr">[Picture of broker and clients again but each client is in a different</p>
<p style="Normal" xid="203" props="text-align:left; dom-dir:ltr">language]</p>
<p style="Normal" xid="204"><c></c></p>
<p style="Normal" xid="205" props="text-align:left; dom-dir:ltr">At present the Qpid project is supporting APIs for quite a few</p>
<p style="Normal" xid="206" props="text-align:left; dom-dir:ltr">languages and environments: C++, Java JMS, Python, ruby, Perl, and</p>
<p style="Normal" xid="207" props="text-align:left; dom-dir:ltr">also the .Net environment, we also support Linux and Windows</p>
<p style="Normal" xid="208" props="text-align:left; dom-dir:ltr">platforms, and Solaris and FreeBSD aren't far away.</p>
<p style="Normal" xid="209"><c></c></p>
<p style="Normal" xid="210" props="text-align:left; dom-dir:ltr">For good historical reasons the project has 3 different separate</p>
<p style="Normal" xid="211" props="text-align:left; dom-dir:ltr">implementations of the AMQP protocol - in Java, in C++ and in</p>
<p style="Normal" xid="212" props="text-align:left; dom-dir:ltr">Python - notice that none of these are C!. Most of the other language</p>
<p style="Normal" xid="213" props="text-align:left; dom-dir:ltr">APIs actually layer on top of the C++ API</p>
<p style="Normal" xid="214" props="text-align:left; dom-dir:ltr">using a great tool called SWIG which knows how to automatically create</p>
<p style="Normal" xid="215" props="text-align:left; dom-dir:ltr">code to tie an API into the foreign function interface for that</p>
<p style="Normal" xid="216" props="text-align:left; dom-dir:ltr">language implementation. The .Net implementation is actually built on</p>
<p style="Normal" xid="217" props="text-align:left; dom-dir:ltr">top of hand built code which does similar. So we are currently</p>
<p style="Normal" xid="218" props="text-align:left; dom-dir:ltr">maintaining 3 different implementations of the same protocol, at this</p>
<p style="Normal" xid="219" props="text-align:left; dom-dir:ltr">point you might be getting a glimmer of where I'm going!</p>
<p style="Normal" xid="220"><c></c></p>
<p style="Normal" xid="221" props="text-align:left; dom-dir:ltr">Now this is quite as bad as you might think, because this is a defined</p>
<p style="Normal" xid="222" props="text-align:left; dom-dir:ltr">protocol with an actual written standard so it's not as bad as having</p>
<p style="Normal" xid="223" props="text-align:left; dom-dir:ltr">say to reverse engineer the protocol from one set of code to implement</p>
<p style="Normal" xid="224" props="text-align:left; dom-dir:ltr">it in the other.</p>
<p style="Normal" xid="225"><c></c></p>
<p style="Normal" xid="226" props="text-align:left; dom-dir:ltr">Ok, I lied before, when I said AMQP was a standard, well sort of, the</p>
<p style="Normal" xid="227" props="text-align:left; dom-dir:ltr">problem is that it's not just one standard! Over the years it has</p>
<p style="Normal" xid="228" props="text-align:left; dom-dir:ltr">passed through a number of revisions 0-8, 0-9, 0-9.1, 0-10 and now it</p>
<p style="Normal" xid="229" props="text-align:left; dom-dir:ltr">has a proposed standard 1.0 revision which is currently making it's</p>
<p style="Normal" xid="230" props="text-align:left; dom-dir:ltr">way through the OASIS standardisation process.</p>
<p style="Normal" xid="231"><c></c></p>
<p style="Normal" xid="232" props="text-align:left; dom-dir:ltr">[Picture of the different protocols?]</p>
<p style="Normal" xid="233"><c></c></p>
<p style="Normal" xid="234" props="text-align:left; dom-dir:ltr">Qpid actually supports the 0-10 standard in all the languages and the</p>
<p style="Normal" xid="235" props="text-align:left; dom-dir:ltr">Java code also supports some of the earlier versions too (0-9 I think)</p>
<p style="Normal" xid="236"><c></c></p>
<p style="Normal" xid="237" props="text-align:left; dom-dir:ltr">So presently our big task is to implement the 1.0 protocol</p>
<p style="Normal" xid="238" props="text-align:left; dom-dir:ltr">version. And obviously we want to do this with the minimum effort now</p>
<p style="Normal" xid="239" props="text-align:left; dom-dir:ltr">and the minimum effort going forwards in maintenance.</p>
<p style="Normal" xid="240"><c></c></p>
<p style="Normal" xid="241" props="text-align:left; dom-dir:ltr">So this has led us into thinking about writing code that would be usable</p>
<p style="Normal" xid="242" props="text-align:left; dom-dir:ltr">in all of these environments and languages.</p>
<p style="Normal" xid="243"><c></c></p>
<p style="Normal" xid="244" props="text-align:left; dom-dir:ltr">Another goal of the project is to be broadly portable to as many</p>
<p style="Normal" xid="245" props="text-align:left; dom-dir:ltr">platforms as possible, from embedded (though probably not the tiniest PLCs)</p>
<p style="Normal" xid="246" props="text-align:left; dom-dir:ltr">through mobile handsets to the more standard desktop and server</p>
<p style="Normal" xid="247" props="text-align:left; dom-dir:ltr">environments. </p>
<p style="Normal" xid="248"><c></c></p>
<p style="Normal" xid="249" props="text-align:left; dom-dir:ltr">So now you can see where I was originally coming from.</p>
<p style="Normal" xid="250"><c></c></p>
<p style="Normal" xid="251" props="text-align:left; dom-dir:ltr">It seems that C is going to be something like a practical solution to</p>
<p style="Normal" xid="252" props="text-align:left; dom-dir:ltr">many (possibly all) these problems.</p>
<p style="Normal" xid="253"><c></c></p>
<p style="Normal" xid="254" props="text-align:left; dom-dir:ltr">[7.5mins to here]</p>
<p style="Normal" xid="255"><c></c></p>
<p style="Normal" xid="256" props="text-align:left; dom-dir:ltr">So how does it help us?</p>
<p style="Normal" xid="257"><c></c></p>
<p style="Normal" xid="258" props="text-align:left; dom-dir:ltr">[Essential motivating point - C is a very good common language to program in as nearly every other language/system can interface directly to it, and the number of systems actually written in C itself is not to underestimated.</p>
<p style="Normal" xid="323" props="text-align:left; dom-dir:ltr"><c></c>This by itself doesn't necessarily mean that you have to write your code in C itself just that it needs to have a good C interface. Now C++ has extern "C" which allows pretty good interoperation with C on this level.</p>
<p style="Normal" xid="265"><c></c></p>
<p style="Normal" xid="266" props="text-align:left; dom-dir:ltr">However then portability is felt. While it's perhaps not 100% true to say that every machine has a C compiler. It 's probably very close to the truth, in any case every practical machine that we care about does have a C compiler, from the smallest. Hold on a sec though, many or most of those compilers are actually gcc the gnu compiler collection and C++ is actually supported by gcc - actually one of the best C++ compilers out there. However C++ has a much more substantial runtime support library than C and that is not actually available everywhere. Still I find it notable that the arduino compiler environment (which is based on gcc) actually does support C++ although possibly not with the full language (exception and runtime type info are almost certainly not present in the supplied runtime).</p>
<p style="Normal" xid="324" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="274" props="text-align:left; dom-dir:ltr">The arduino as you'll know is a hobbyist microcontroller with only a few k of program memory (16/32k) and even less RAM (1/2k).</p>
<p style="Normal" xid="276"><c></c></p>
<p style="Normal" xid="277" props="text-align:left; dom-dir:ltr">This is C as portable assembler: For pretty much every platform you care about the C ABI is standardised. </p>
<p style="Normal" xid="325" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="326" props="text-align:left; dom-dir:ltr">Therefore if you write a library on C anyone can use it. This is emphatically not the case for C++. Until quite recently C++ had hardly a standard ABI on any platform - Solaris provides an example where there still are commonly 2 C++ ABIs (GCCs and SunPros - or whatever Oracle call it now) that might be in use, meaning that producing a C++ library for use by an unknown developer can be an exercise in high frustration. As even if they accidentally link together nothing good will happen afterwards. This can even be an issue if the exported API/ABI is actually C because the runtimes are incompatible. Essentially it means that you end up producing 2 library variants.</p>
<p style="Normal" xid="286"><c></c></p>
<p style="Normal" xid="287" props="text-align:left; dom-dir:ltr">[Next points - Social community based points - essentially that C++ is not a great language for OS community projects.]</p>
<p style="Normal" xid="1" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="2" props="text-align:left; dom-dir:ltr">﻿Open source releases by sloc in the past 12 months:</p>
<table xid="3">
<cell xid="4" props="bot-attach:1; left-attach:0; right-attach:1; top-attach:0">
<p xid="5"><c>Rank</c><c props=""></c></p>
</cell>
<cell xid="7" props="bot-attach:1; left-attach:1; right-attach:2; top-attach:0">
<p xid="8"><c>Language</c><c props=""></c></p>
</cell>
<cell xid="10" props="bot-attach:1; left-attach:2; right-attach:3; top-attach:0">
<p xid="11"><c>%</c><c props=""></c></p>
</cell>
<cell xid="13" props="bot-attach:2; left-attach:0; right-attach:1; top-attach:1">
<p xid="14">1</p>
</cell>
<cell xid="16" props="bot-attach:2; left-attach:1; right-attach:2; top-attach:1">
<p xid="17">C</p>
</cell>
<cell xid="19" props="bot-attach:2; left-attach:2; right-attach:3; top-attach:1">
<p xid="20">41.31</p>
</cell>
<cell xid="22" props="bot-attach:3; left-attach:0; right-attach:1; top-attach:2">
<p xid="23">2</p>
</cell>
<cell xid="25" props="bot-attach:3; left-attach:1; right-attach:2; top-attach:2">
<p xid="26">C++</p>
</cell>
<cell xid="28" props="bot-attach:3; left-attach:2; right-attach:3; top-attach:2">
<p xid="29">14.85</p>
</cell>
<cell xid="31" props="bot-attach:4; left-attach:0; right-attach:1; top-attach:3">
<p xid="32">3</p>
</cell>
<cell xid="34" props="bot-attach:4; left-attach:1; right-attach:2; top-attach:3">
<p xid="35">Java</p>
</cell>
<cell xid="37" props="bot-attach:4; left-attach:2; right-attach:3; top-attach:3">
<p xid="38">7.54</p>
</cell>
<cell xid="40" props="bot-attach:5; left-attach:0; right-attach:1; top-attach:4">
<p xid="41">4</p>
</cell>
<cell xid="43" props="bot-attach:5; left-attach:1; right-attach:2; top-attach:4">
<p xid="44">Javascript</p>
</cell>
<cell xid="46" props="bot-attach:5; left-attach:2; right-attach:3; top-attach:4">
<p xid="47">6.59</p>
</cell>
<cell xid="49" props="bot-attach:6; left-attach:0; right-attach:1; top-attach:5">
<p xid="50">5</p>
</cell>
<cell xid="52" props="bot-attach:6; left-attach:1; right-attach:2; top-attach:5">
<p xid="53">Autoconf</p>
</cell>
<cell xid="55" props="bot-attach:6; left-attach:2; right-attach:3; top-attach:5">
<p xid="56">5.66</p>
</cell>
<cell xid="58" props="bot-attach:7; left-attach:0; right-attach:1; top-attach:6">
<p xid="59">6</p>
</cell>
<cell xid="61" props="bot-attach:7; left-attach:1; right-attach:2; top-attach:6">
<p xid="62">PHP</p>
</cell>
<cell xid="64" props="bot-attach:7; left-attach:2; right-attach:3; top-attach:6">
<p xid="65">3.37</p>
</cell>
<cell xid="67" props="bot-attach:8; left-attach:0; right-attach:1; top-attach:7">
<p xid="68">7</p>
</cell>
<cell xid="70" props="bot-attach:8; left-attach:1; right-attach:2; top-attach:7">
<p xid="71">Shell</p>
</cell>
<cell xid="73" props="bot-attach:8; left-attach:2; right-attach:3; top-attach:7">
<p xid="74">2.48</p>
</cell>
<cell xid="76" props="bot-attach:9; left-attach:0; right-attach:1; top-attach:8">
<p xid="77">8</p>
</cell>
<cell xid="79" props="bot-attach:9; left-attach:1; right-attach:2; top-attach:8">
<p xid="80">Python</p>
</cell>
<cell xid="82" props="bot-attach:9; left-attach:2; right-attach:3; top-attach:8">
<p xid="83">2.41</p>
</cell>
<cell xid="85" props="bot-attach:10; left-attach:0; right-attach:1; top-attach:9">
<p xid="86">9</p>
</cell>
<cell xid="88" props="bot-attach:10; left-attach:1; right-attach:2; top-attach:9">
<p xid="89">Eiffel</p>
</cell>
<cell xid="91" props="bot-attach:10; left-attach:2; right-attach:3; top-attach:9">
<p xid="92">2.03</p>
</cell>
<cell xid="94" props="bot-attach:11; left-attach:0; right-attach:1; top-attach:10">
<p xid="95">10</p>
</cell>
<cell xid="97" props="bot-attach:11; left-attach:1; right-attach:2; top-attach:10">
<p xid="98">Perl</p>
</cell>
<cell xid="100" props="bot-attach:11; left-attach:2; right-attach:3; top-attach:10">
<p xid="101">1.91</p>
</cell>
<cell xid="103" props="bot-attach:12; left-attach:0; right-attach:1; top-attach:11">
<p xid="104">11</p>
</cell>
<cell xid="106" props="bot-attach:12; left-attach:1; right-attach:2; top-attach:11">
<p xid="107">Make</p>
</cell>
<cell xid="109" props="bot-attach:12; left-attach:2; right-attach:3; top-attach:11">
<p xid="110">1.84</p>
</cell>
<cell xid="112" props="bot-attach:13; left-attach:0; right-attach:1; top-attach:12">
<p xid="113">12</p>
</cell>
<cell xid="115" props="bot-attach:13; left-attach:1; right-attach:2; top-attach:12">
<p xid="116">Assembler</p>
</cell>
<cell xid="118" props="bot-attach:13; left-attach:2; right-attach:3; top-attach:12">
<p xid="119">1.57</p>
</cell>
<cell xid="121" props="bot-attach:14; left-attach:0; right-attach:1; top-attach:13">
<p xid="122">13</p>
</cell>
<cell xid="124" props="bot-attach:14; left-attach:1; right-attach:2; top-attach:13">
<p xid="125">XML Schema</p>
</cell>
<cell xid="127" props="bot-attach:14; left-attach:2; right-attach:3; top-attach:13">
<p xid="128">1.10</p>
</cell>
<cell xid="130" props="bot-attach:15; left-attach:0; right-attach:1; top-attach:14">
<p xid="131">14</p>
</cell>
<cell xid="133" props="bot-attach:15; left-attach:1; right-attach:2; top-attach:14">
<p xid="134">C#</p>
</cell>
<cell xid="136" props="bot-attach:15; left-attach:2; right-attach:3; top-attach:14">
<p xid="137">1.03</p>
</cell>
<cell xid="139" props="bot-attach:16; left-attach:0; right-attach:1; top-attach:15">
<p xid="140">15</p>
</cell>
<cell xid="142" props="bot-attach:16; left-attach:1; right-attach:2; top-attach:15">
<p xid="143">Ruby</p>
</cell>
<cell xid="145" props="bot-attach:16; left-attach:2; right-attach:3; top-attach:15">
<p xid="146">1.01</p>
</cell>
</table>
<p style="Normal" xid="149"></p>
<p style="Normal" xid="151">* Source Black Duck software</p>
<p style="Normal" xid="150"></p>
<p style="Normal" xid="322">This is by lines of code so last year 40% of the code released was in C, which is the largest by far - C++ at 15% is next. Of course LoC is a very crude measure, by even so it indicates that there are still a lot of C open source coders out there.</p>
<p style="Normal" xid="320"></p>
<p style="Normal" xid="288" props="text-align:left; dom-dir:ltr">* Open source systems software is almost entirely written in C (The new linker gold is about the only exception I could find), and there is not so much experience in this world with maintaining C++ code, there is actually a level of antagonism to the language - in the real world this is an issue.</p>
<p style="Normal" xid="327" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="328" props="text-align:left; dom-dir:ltr"><c></c>* C++ is a big complex language and in a loose community it is hard to coalesce on a subset, as there is always someone who wants to try that exciting feature they've just heard about. This means that the code can grow in mutually incomprehensible silos. As only a developer who has worked on a section of code can maintain that code easily. This quickly becomes a barrier to development.</p>
<p style="Normal" xid="295" props="text-align:left; dom-dir:ltr">* More importantly it is a strong barrier to new people being able to quickly and casually hack on the codebase and this is an important problem for an open source project. well they can but they are for too likely to make mistakes</p>
<p style="Normal" xid="298" props="text-align:left; dom-dir:ltr">* And finally this leads to tool support for C++ has been too weak historically (it getting better now that clang supports nearly all of the modern language, and is designed so that you can use its parser in your own tools). This has meant that it was practically impossible for us to automate any sort of language checking.</p>
<p style="Normal" xid="302"><c></c></p>
<p style="Normal" xid="303" props="text-align:left; dom-dir:ltr">Of course</p>
<p style="Normal" xid="304"><c></c></p>
<p style="Normal" xid="305" props="text-align:left; dom-dir:ltr">C as low level language, again portable assembler:</p>
<p style="Normal" xid="306" props="text-align:left; dom-dir:ltr">* C hides very little from you and doesn't as much as generate a hidden indirect call. So this</p>
<p style="Normal" xid="307" props="text-align:left; dom-dir:ltr">can be pretty important if you want to have full control and understanding over what the machine</p>
<p style="Normal" xid="308" props="text-align:left; dom-dir:ltr">is doing.</p>
<p style="Normal" xid="309"><c></c></p>
<p style="Normal" xid="310" props="text-align:left; dom-dir:ltr">It also means that you're not locked into doing classes for example in exactly the way that C++</p>
<p style="Normal" xid="311" props="text-align:left; dom-dir:ltr">does it. It'll be more verbose, and you might end up using macros to help you (ugh!) but you</p>
<p style="Normal" xid="312" props="text-align:left; dom-dir:ltr">could implement say prototype based OO and do it efficiently.</p>
<p style="Normal" xid="313"><c></c></p>
<p style="Normal" xid="314" props="text-align:left; dom-dir:ltr">[Pitfalls - actually not C pitfalls per se perhaps,</p>
<p style="Normal" xid="315" props="text-align:left; dom-dir:ltr">need to understand the threading environment of the language your</p>
<p style="Normal" xid="316" props="text-align:left; dom-dir:ltr">binding into. Or at least need to make sure that the API you expose</p>
<p style="Normal" xid="317" props="text-align:left; dom-dir:ltr">doesn't require grabbing control or creating a thread.</p>
<p style="Normal" xid="318"></p>
</section>
</abiword>
